const passport = require("passport");
const GoogleStrategy = require("passport-google-oauth20").Strategy; // only import Strategy
const mongoose = require("mongoose");
const keys = require("../config/keys");
// passport be aware that there's

// pull only the schema from mongoose
// and create a new model instance
const User = mongoose.model("users");

// define serializeUser to generate token after being logged in:
passport.serializeUser((user, done) => {
  done(null, user.id); // reference the id generated by mongo
});

// define deserializeUser
// use the token to search over the whole collection user:
passport.deserializeUser((id, done) => {
  User.findById(id).then(user => {
    done(null, user);
  });
});

// a new strategy available:
passport.use(
  new GoogleStrategy(
    {
      clientID: keys.googleClientID,
      clientSecret: keys.googleClientSecret,
      callbackURL: "/auth/google/callback",
      // tell Google to trust if a request goes thru a proxy
      proxy: true
    },
    // REFACTOR ALL OF THAT USING THE asynchronous code:
    // (accessToken, refreshToken, profile, done) => {
    //   // find a user BUT it
    //   // returns a promise
    //   User.findOne({ googleId: profile.id })
    //     // model instance with available user
    //     .then(existingUser => {
    //       if (existingUser) {
    //         // already have a record in the DB
    //         // tell passport we are done:
    //         done(null, existingUser);
    //       } else {
    //         // do not have this user in the DB
    //         // new mongoose instance of the user class
    //         new User({ googleId: profile.id })
    //           .save() // save the instance
    //           // tell passport we are done
    //           // but MUST make sure it is indeed created
    //           // using the "user" instance
    //           .then(user => done(null, user));
    //       }
    //     });
    // }
    async (accessToken, refreshToken, profile, done) => {
      // find a user BUT it
      // returns a promise
      const existingUser = await User.findOne({ googleId: profile.id });
      // model instance with available user
      if (existingUser) {
        // already have a record in the DB
        // tell passport we are done:
        done(null, existingUser);
      } else {
        // do not have this user in the DB
        // new mongoose instance of the user class
        const user = await new User({ googleId: profile.id }).save(); // save the instance
        done(null, user);
      }
    }
    // ANOTHER REFACTORING - OPTIONAL:
    // async (accessToken, refreshToken, profile, done) => {
    //   const existingUser = await User.findOne({ googleId: profile.id });
    //   MUST USE return:
    //   if (existingUser) {
    //     //user return:
    //     return done(null, existingUser);
    //   }
    //  // CUZ of return NO need of else {}
    //   const user = new User({ googleId: profile.id }).save();
    //   done(null, user);
    // }
  )
);
// creates a new instance of the Google passport strategy
// how to authenticate users inside of our app
// get secret from:
// https://console.developers.google.com/apis/dashboard?pli=1
// clientID => public token, we can share this with the public. Only identifies our app
// clientSecret => private token !!!! DO NOT SHARE !!!! MUST SECURELY STORE IT
